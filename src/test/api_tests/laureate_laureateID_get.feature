# ********RoostGPT********

# Test generated by RoostGPT for test claude-karate using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=81e2a40d4b
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureate API

Background:
  * url target

Scenario: Get laureate information by ID
  * def laureateId = 123
  Given path '/2.1/laureate/', laureateId
  When method GET
  Then status 200
  And match response.laureate.id == laureateId
  And match response.laureate.laureateIfPerson.knownName.en == '#string'
  And match response.laureate.laureateIfPerson.givenName.en == '#string' 
  And match response.laureate.laureateIfPerson.familyName.en == '#string'
  And match response.laureate.laureateIfPerson.fullName.en == '#string'
  And match response.laureate.laureateIfPerson.filename == '#string'
  And match response.laureate.laureateIfPerson.gender == '#string'
  And match response.laureate.laureateIfPerson.birth.date == '#date'
  And match response.laureate.laureateIfPerson.birth.place.city.en == '#string'
  And match response.laureate.laureateIfPerson.birth.place.country.en == '#string'
  And match response.laureate.nobelPrizes == '#[_ >= 1]'
  And match each response.laureate.nobelPrizes[*].awardYear == '#number'
  And match each response.laureate.nobelPrizes[*].category.en == '#string'
  And match each response.laureate.nobelPrizes[*].categoryFullName.en == '#string'
  And match each response.laureate.nobelPrizes[*].sortOrder == '#string'
  And match each response.laureate.nobelPrizes[*].portion == '#string'
  And match each response.laureate.nobelPrizes[*].dateAwarded == '##date'
  And match each response.laureate.nobelPrizes[*].prizeStatus == '#string'
  And match each response.laureate.nobelPrizes[*].motivation.en == '#string'
  And match each response.laureate.nobelPrizes[*].prizeAmount == '#number'
  And match each response.laureate.nobelPrizes[*].prizeAmountAdjusted == '#number'

Scenario: Get laureate information for non-existent ID
  Given path '/2.1/laureate/999999'
  When method GET
  Then status 404
  And match response == 
  """
  {
    "code": "#string",
    "message": "#string"
  }
  """

Scenario: Get laureate information with invalid ID format
  Given path '/2.1/laureate/abc'
  When method GET
  Then status 400
  And match response == 
  """
  {
    "code": "#string", 
    "message": "#string"
  }
  """
