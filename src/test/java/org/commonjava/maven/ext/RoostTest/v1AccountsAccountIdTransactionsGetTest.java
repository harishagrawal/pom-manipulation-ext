// ********RoostGPT********
/*
Test generated by RoostGPT for test rbi-swagger using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /v1/accounts/{account-Id}/transactions_get for http method type GET in rest-assured framework

RoostTestHash=2b28de8802


*/

// ********RoostGPT********
package org.commonjava.maven.ext.RoostTest;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;
import org.json.JSONArray;

public class v1AccountsAccountIdTransactionsGetTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      String[] envVarsList = {"account-Id"};
      envList = dataloader.load("src/test/java/org/commonjava/maven/ext/RoostTest/v1_accounts_account-Id_transactionsGetTest.csv", envVarsList);
    }

  
    @Test  
    public void v1AccountsAccountIdTransactionsGet_Test() {
        this.setUp();
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty()) ? testData.get("BASE_URL"): "http://xs2a.rbinternational.com";  
  
                Response responseObj = given()
				.header("Consent-ID", testData.get("Consent-ID") != null ? testData.get("Consent-ID") : "")
				.header("Content-Type", testData.get("Content-Type") != null ? testData.get("Content-Type") : "")
				.header("PSU-ID", testData.get("PSU-ID") != null ? testData.get("PSU-ID") : "")
				.queryParam("date_from", testData.get("date_from") != null ? testData.get("date_from") : "")
				.queryParam("bookingStatus", testData.get("bookingStatus") != null ? testData.get("bookingStatus") : "")
				.queryParam("withBalance", testData.get("withBalance") != null ? testData.get("withBalance") : "")
				.queryParam("date_to", testData.get("date_to") != null ? testData.get("date_to") : "")
				.pathParam("account-Id", testData.get("account-Id") != null ? testData.get("account-Id") : "")
                .when()
                .get("/v1/accounts/{account-Id}/transactions")  
                .then() 
                .extract().response(); 
              JsonPath response;
              String contentType = responseObj.getContentType();
              if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
                String xmlResponse = responseObj.asString();
                JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
                JSONObject jsonData = jsonResponse.getJSONObject("xml");
                String jsonString = jsonData.toString();
                response = new JsonPath(jsonString);
        
              } else {  
                response = responseObj.jsonPath(); 
              }  
         
                if (responseObj.statusCode() == 200) {
					System.out.println("Description: Success");
				}
  
            }  
    }
}
