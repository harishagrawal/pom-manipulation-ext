# Test generated by RoostGPT for test bankAssist-api using AI Type Open AI and AI Model gpt-4-1106-preview

// RoostTestHash=88810bf424

package org.commonjava.maven.ext.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;

public class GetCustomerInfoPostTest {
  
    @Test  
    public void GetCustomerInfo_post_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/commonjava/maven/ext/RoostTest/GetCustomerInfo_post.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
  
                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  
                
  
                Response response = given()
				.pathParam("koreUserId", map.get("koreUserId"))
				.pathParam("botId", map.get("botId"))
				.pathParam("accountId", map.get("accountId"))
				.pathParam("Authorization", map.get("Authorization"))
				.pathParam("X-Auth-token", map.get("X-Auth-token"))
				.pathParam("X-CORRELATION-ID", map.get("X-CORRELATION-ID"))
				.contentType(ContentType.JSON)
				.body("{\n"+
					"  \"customerId\": \"" + map.get("customerId") + "\n" +
 				"}")
                .when()
                .post("/GetCustomerInfo")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 200) {

            if (response.jsonPath().get("alternatePhoneNumber") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("alternatePhoneNumber"), instanceOf(number.class));
          }

            if (response.jsonPath().get("customerId") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("customerId"), instanceOf(String.class));
          }

            if (response.jsonPath().get("email") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("email"), instanceOf(String.class));
          }

            if (response.jsonPath().get("identificationNumber") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("identificationNumber"), instanceOf(number.class));
          }

            if (response.jsonPath().get("identificationType") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("identificationType"), instanceOf(String.class));
          }

            if (response.jsonPath().get("image") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("image"), instanceOf(String.class));
          }

            if (response.jsonPath().get("isAlternateMobileNumber") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("isAlternateMobileNumber"), instanceOf(Boolean.class));
          }

            if (response.jsonPath().get("isPrimaryMobileNumber") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("isPrimaryMobileNumber"), instanceOf(Boolean.class));
          }

            if (response.jsonPath().get("location") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("location"), instanceOf(String.class));
          }

            if (response.jsonPath().get("name") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("name"), instanceOf(String.class));
          }

            if (response.jsonPath().get("firstName") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("firstName"), instanceOf(String.class));
          }

            if (response.jsonPath().get("lastName") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("lastName"), instanceOf(String.class));
          }

            if (response.jsonPath().get("personalBanker") != null) {
            if (response.jsonPath().get("personalBanker.name") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("personalBanker.name"), instanceOf(String.class));
          }

            if (response.jsonPath().get("personalBanker.email") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("personalBanker.email"), instanceOf(String.class));
          }

            if (response.jsonPath().get("personalBanker.mobileNumber") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("personalBanker.mobileNumber"), instanceOf(String.class));
          }

          }

            if (response.jsonPath().get("phone") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("phone"), instanceOf(number.class));
          }

            if (response.jsonPath().get("securityQuestions") != null) {
                MatcherAssert.assertThat(response.jsonPath().getList("securityQuestions"), instanceOf(List.class));

          }

            if (response.jsonPath().get("segmentId") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("segmentId"), instanceOf(number.class));
          }

            if (response.jsonPath().get("userId") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("userId"), instanceOf(String.class));
          }

            if (response.jsonPath().get("id") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("id"), instanceOf(String.class));
          }
}
if (response.statusCode() == 401) {

            if (response.jsonPath().get("err") != null) {
            if (response.jsonPath().get("err.message") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));
          }

          }
}
if (response.statusCode() == 404) {

            if (response.jsonPath().get("err") != null) {
            if (response.jsonPath().get("err.message") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));
          }

          }
}
  
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }
}
