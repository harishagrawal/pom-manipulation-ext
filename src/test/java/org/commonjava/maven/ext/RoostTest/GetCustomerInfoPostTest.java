// Test generated by RoostGPT for test restA-azure-kore using AI Type Azure Open AI and AI Model roostgpt-4-32k

// Test generated for /GetCustomerInfo_post for http method type POST in rest-assured framework

// RoostTestHash=88810bf424

package org.commonjava.maven.ext.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.hamcrest.MatcherAssert;
import java.util.Objects;
import static org.hamcrest.Matchers.instanceOf;

public class GetCustomerInfoPostTest {

    @Test  
    public void GetCustomerInfo_post_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  

        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/commonjava/maven/ext/RoostTest/GetCustomerInfo_post.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  

            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  

                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  

                Response response = given()
                .pathParam("koreUserId", map.get("koreUserId"))
                .pathParam("botId", map.get("botId"))
                .pathParam("accountId", map.get("accountId"))
                .pathParam("Authorization", map.get("Authorization"))
                .pathParam("X-Auth-token", map.get("X-Auth-token"))
                .pathParam("X-CORRELATION-ID", map.get("X-CORRELATION-ID"))
                .contentType(ContentType.JSON)
                .body("{\n"+
                    "  \"customerId\": \"" + map.get("customerId") + "\n" +
                 "}")
                .when()
                .post("/GetCustomerInfo")  
                .then() 
                .extract().response();    

            validateResponse(response);
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    public void validateResponse(Response response) {
        switch(response.statusCode()) {
			case 200: 
				System.out.println("Description: successful operation");
				validateCustomerInfoResponse(response);
				break;
				
			case 401: 
				System.out.println("Description: Error: Authorisation failed.");
				validateErrorResponse(response);
				break;
				
			case 404: 
				System.out.println("Description: Error: Not Found");
				validateNotFoundResponse(response);
				break;
				
			default:
				System.out.println("Unexpected status code received: " + response.statusCode());
				break;
		}
	}
	
	public void validateCustomerInfoResponse(Response response) {
		// List of keys in the response body
		String[] keys = new String[] {"alternatePhoneNumber", "customerId", "email", "identificationNumber", "identificationType",
									 "image", "isAlternateMobileNumber", "isPrimaryMobileNumber", "location", "name", 
									 "firstName", "lastName", "personalBanker", "phone", "securityQuestions", "segmentId", 
									 "userId", "id"};
		// Corresponding classes for each key
		Class[] classes = new Class[] {Integer.class, String.class, String.class, Integer.class, String.class, String.class,
									  Boolean.class, Boolean.class, String.class, String.class, String.class, String.class,
									  Map.class, Integer.class, List.class, Integer.class, String.class, String.class};
		assertResponseTypes(response, keys, classes);
	}

	public void validateErrorResponse(Response response) {
        // Continue to add assertions for 401 status code
		MatcherAssert.assertThat(Objects.requireNonNull(response.jsonPath().get("err.message")), instanceOf(String.class));  
	}
	
	public void validateNotFoundResponse(Response response) {
        // Continue to add assertions for 404 status code
		MatcherAssert.assertThat(Objects.requireNonNull(response.jsonPath().get("err.message")), instanceOf(String.class));
	}

	public void assertResponseTypes(Response response, String[] keys, Class[] classes) {
		for(int i = 0; i < keys.length; i++) {
			if(response.jsonPath().get(keys[i]) != null) {
				MatcherAssert.assertThat(response.jsonPath().get(keys[i]), instanceOf(classes[i])); 
			}
		}
	}
}
