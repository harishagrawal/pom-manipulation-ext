// Test generated by RoostGPT for test rbi-swagger using AI Type Azure Open AI and AI Model roostgpt-4-32k


// Test generated for /v1/accounts_get for http method type GET in rest-assured framework


// RoostTestHash=5144dc9ece


package org.commonjava.maven.ext.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class accountsGetTest {
  
    @Test  
    public void accountsGet_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src" + File.separator + "test" + File.separator + "java" + File.separator + "org" + File.separator + "commonjava" + File.separator + "maven" + File.separator + "ext" + File.separator + "RoostTest" + File.separator + "accountsGetTest.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
  
                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  
                
  
                Response response = given()
				.pathParam("Consent-ID", map.get("Consent-ID") != null ? map.get("Consent-ID") : "")
				.pathParam("withBalance", map.get("withBalance") != null ? map.get("withBalance") : "")
				.pathParam("Content-Type", map.get("Content-Type") != null ? map.get("Content-Type") : "")
				.pathParam("PSU-ID", map.get("PSU-ID") != null ? map.get("PSU-ID") : "")
                .when()
                .get("/v1/accounts")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 200) {
					System.out.println("Description: Success");
    
              if (response.jsonPath().get("accounts") != null) {    
                for (int i = 0; i < response.jsonPath().getList("accounts").size(); i++) {    
              if (response.jsonPath().get("accounts["+ i +"].resourceId") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].resourceId"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].iban") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].iban"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].bic") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].bic"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].pan") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].pan"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].bban") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].bban"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].currency") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].currency"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].accountType") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].accountType"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].cashAccountType") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].cashAccountType"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].name") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].name"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].balances") != null) {    
                for (int i1 = 0; i1 < response.jsonPath().getList("accounts["+ i +"].balances").size(); i1++) {    
              if (response.jsonPath().get("accounts["+ i +"].balances["+ i1 +"].balanceType") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].balances["+ i1 +"].balanceType"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].balances["+ i1 +"].lastChangeDateTime") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].balances["+ i1 +"].lastChangeDateTime"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].balances["+ i1 +"].referenceDate") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].balances["+ i1 +"].referenceDate"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].balances["+ i1 +"].balanceAmount") != null) {    
              if (response.jsonPath().get("accounts["+ i +"].balances["+ i1 +"].balanceAmount.currency") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].balances["+ i1 +"].balanceAmount.currency"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("accounts["+ i +"].balances["+ i1 +"].balanceAmount.amount") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("accounts["+ i +"].balances["+ i1 +"].balanceAmount.amount"), instanceOf(Integer.class));  
          }
  
          }
    
                  }  
                MatcherAssert.assertThat(response.jsonPath().getList("accounts["+ i +"].balances"), instanceOf(List.class));
  
          }
    
              if (response.jsonPath().get("accounts["+ i +"]._links") != null) {  
          }
    
                  }  
                MatcherAssert.assertThat(response.jsonPath().getList("accounts"), instanceOf(List.class));
  
          }
				}
if (response.statusCode() == 400) {
					System.out.println("Description: Bad Request");
    
              if (response.jsonPath().get("psuMessage") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("psuMessage"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("tppMessages") != null) {    
                for (int i = 0; i < response.jsonPath().getList("tppMessages").size(); i++) {    
              if (response.jsonPath().get("tppMessages["+ i +"].category") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("tppMessages["+ i +"].category"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("tppMessages["+ i +"].code") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("tppMessages["+ i +"].code"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("tppMessages["+ i +"].path") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("tppMessages["+ i +"].path"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("tppMessages["+ i +"].text") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("tppMessages["+ i +"].text"), instanceOf(String.class));  
          }
    
                  }  
                MatcherAssert.assertThat(response.jsonPath().getList("tppMessages"), instanceOf(List.class));
  
          }
    
              if (response.jsonPath().get("_links") != null) {  
          }
				}
if (response.statusCode() == 401) {
					System.out.println("Description: Unauthorized");
    
              if (response.jsonPath().get("psuMessage") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("psuMessage"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("tppMessages") != null) {    
                for (int i = 0; i < response.jsonPath().getList("tppMessages").size(); i++) {    
              if (response.jsonPath().get("tppMessages["+ i +"].category") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("tppMessages["+ i +"].category"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("tppMessages["+ i +"].code") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("tppMessages["+ i +"].code"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("tppMessages["+ i +"].path") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("tppMessages["+ i +"].path"), instanceOf(String.class));  
          }
    
              if (response.jsonPath().get("tppMessages["+ i +"].text") != null) {
                MatcherAssert.assertThat(response.jsonPath().get("tppMessages["+ i +"].text"), instanceOf(String.class));  
          }
    
                  }  
                MatcherAssert.assertThat(response.jsonPath().getList("tppMessages"), instanceOf(List.class));
  
          }
    
              if (response.jsonPath().get("_links") != null) {  
          }
				}
  
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }
}
