
// ********RoostGPT********
/*
Test generated by RoostGPT for test restA-azure-kore using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /deposit_post for http method type POST in rest-assured framework

RoostTestHash=70db6d5eac



roost_feedback [3/1/2024, 11:13:40 AM]:indent the code properly similar to how Java formatter or beautifier would do
*/

// ********RoostGPT********

/*
Test generated by RoostGPT for test restA-azure-kore using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /deposit_post for http method type POST in rest-assured framework

RoostTestHash=70db6d5eac
*/
package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.instanceOf;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class depositPostTest {

    List<Map<String, String>> envList = new ArrayList<>();

    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      envList = dataloader.loadData("src/test/java/org/commonjava/maven/ext/RoostTest/depositPostTest.csv");
    }

    @Test  
    public void depositPost_Test() {
        this.setUp();
        for (Map<String, String> map : envList) {
            RestAssured.baseURI = map.get("BASE_URL");  

            Response response = given()
                .pathParam("koreUserId", map.get("koreUserId") != null ? map.get("koreUserId") : "")
                .pathParam("botId", map.get("botId") != null ? map.get("botId") : "")
                .pathParam("accountId", map.get("accountId") != null ? map.get("accountId") : "")
                .pathParam("Authorization", map.get("Authorization") != null ? map.get("Authorization") : "")
                .contentType(ContentType.JSON)
                .body("{\n" +
                    "  \"customerId\": \"" + (map.get("customerId") != null ? map.get("customerId") : "") + "\",\n" + 
                    "  \"sourceAccountId\": \"" + (map.get("sourceAccountId") != null ? map.get("sourceAccountId") : "") + "\",\n" + 
                    "  \"amount\": \"" + (map.get("amount") != null ? map.get("amount") : "") + "\",\n" + 
                    "  \"currency\": \"" + (map.get("currency") != null ? map.get("currency") : "") + "\",\n" + 
                    "  \"image\": \"" + (map.get("image") != null ? map.get("image") : "") + "\"\n" +
                "}")
                .header("Authorization", "Bearer " + map.get("BEARER_TOKEN"))
                .when()
                .post("/deposit")
                .then() 
                .extract().response();   

            if (response.statusCode() == 200) {
                System.out.println("Description: Deposit success");
            }

            if (response.statusCode() == 401) {
                System.out.println("Description: Error: Authorisation failed.");
                if (response.jsonPath().get("err") != null && response.jsonPath().get("err.message") != null) {  
                    assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));  
                }
            }

            if (response.statusCode() == 404) {
                System.out.println("Description: Error: Not Found");
                if (response.jsonPath().get("err") != null && response.jsonPath().get("err.message") != null) {  
                    assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));  
                }
            }  
        }
    }
}
