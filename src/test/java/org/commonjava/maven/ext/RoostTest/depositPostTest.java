// Test generated by RoostGPT for test restA-gpt4-kore using AI Type Open AI and AI Model gpt-4

// Test generated for /deposit_post for http method type POST in rest-assured framework

// RoostTestHash=70db6d5eac

package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.instanceOf;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.assertEquals;

public class DepositPostTest {

    private static final String BASE_URL = System.getenv("BASE_URL");

    @Test
    public void depositPostTest() {
        RestAssured.baseURI = BASE_URL;

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/commonjava/maven/ext/RoostTest/deposit_post.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> map = createDataMap(headers, line);
                Response response = sendPostRequest(map);
                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> createDataMap(String[] headers, String line) {
        String[] data = line.split(",");
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private Response sendPostRequest(Map<String, String> map) {
        return given()
                .pathParams(map)
                .contentType(ContentType.JSON)
                .body(map)
                .when()
                .post("/deposit")
                .then()
                .extract().response();
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        switch (statusCode) {
            case 200:
                System.out.println("Description: Deposit success");
                break;
            case 401:
                validateErrorResponse(response, "Error: Authorisation failed.");
                break;
            case 404:
                validateNotFoundResponse(response, "Error: Not Found");
                break;
            default:
                System.out.println("Unexpected status code: " + statusCode);
        }
    }

    private void validateErrorResponse(Response response, String expectedMessage) {
        System.out.println(expectedMessage);
        if (response.jsonPath().get("err") != null) {
            String errorMessage = response.jsonPath().get("err.message");
            if (errorMessage != null) {
                assertThat(errorMessage, instanceOf(String.class));
                assertEquals(expectedMessage, errorMessage);
            }
        }
    }

    private void validateNotFoundResponse(Response response, String expectedMessage) {
        validateErrorResponse(response, expectedMessage);
    }

    private void validateUnprocessableEntityResponse(Response response, String expectedMessage) {
        validateErrorResponse(response, expectedMessage);
    }
}
