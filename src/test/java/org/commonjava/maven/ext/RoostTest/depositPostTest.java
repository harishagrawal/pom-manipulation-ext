// Test generated by RoostGPT for test restA-azure-kore using AI Type Azure Open AI and AI Model roostgpt-4-32k

// Test generated for /deposit_post for http method type POST in rest-assured framework

// RoostTestHash=70db6d5eac

package org.commonjava.maven.ext.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.hamcrest.MatcherAssert;

public class depositPostTest {

    @Test  
    public void depositPostTest() {  
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/commonjava/maven/ext/RoostTest/deposit_post.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  

            String line;  
            while ((line = reader.readLine()) != null) {
                Map<String, String> map = retrieveMapFromLine(headers, line);
                Response response = triggerPostRequest(map);

                validateResponseWithStatusCode(response);
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    private Map<String, String> retrieveMapFromLine(String[] headers, String line){
        String[] data = line.split(",");  
        Map<String, String> map = new HashMap<>();  
        for (int i = 0; i < headers.length; i++)
            map.put(headers[i], data[i]);
  
        return map;
    } 

    private Response triggerPostRequest(Map<String, String> map) {
        return given()
            .pathParam("koreUserId", map.get("koreUserId"))
            .pathParam("botId", map.get("botId"))
            .pathParam("accountId", map.get("accountId"))
            .pathParam("Authorization", map.get("Authorization"))
            .contentType(ContentType.JSON)
            .body(createRequestPayload(map))
            .when()
            .post("/deposit")  
            .then() 
            .extract().response();
    }

    private String createRequestPayload(Map<String, String> map) {
        return "{\n"+
            "  \"customerId\": \"" + map.get("customerId") + "\",\n" +
            "  \"sourceAccountId\": \"" + map.get("sourceAccountId") + "\",\n" +
            "  \"amount\": \"" + map.get("amount") + "\",\n" +
            "  \"currency\": \"" + map.get("currency") + "\",\n" +
            "  \"image\": \"" + map.get("image") + "\n" +
        "}";
    }

    private void validateResponseWithStatusCode(Response response){
        int statusCode = response.getStatusCode();
        switch (statusCode) {
            case 200:
                System.out.println("Description: Deposit success");
                break;
            case 404:
            case 401:
                validateErrorResponse(response, statusCode);
                break;
            default: 
                System.out.println("Description: Unknown response code");
        }
    }

    private void validateErrorResponse(Response response, int statusCode) {
        String description = statusCode == 404 ? "Error: Not Found" : "Error: Authorization failed.";
        System.out.println(description);

        if (response.jsonPath().get("err") != null && response.jsonPath().get("err.message") != null) {
            MatcherAssert.assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));  
        }
    }
}
