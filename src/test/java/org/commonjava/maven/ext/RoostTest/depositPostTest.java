// Test generated by RoostGPT for test restA-turbo-assistant-kore using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /deposit_post for http method type POST in rest-assured framework

// RoostTestHash=70db6d5eac

package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Map;
import java.util.HashMap;

public class depositPostTest {

    @Before
    public void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void deposit_post_Test() {

        // Read CSV file
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/commonjava/maven/ext/RoostTest/deposit_post.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                // Process CSV line into Map
                Map<String, String> dataMap = processCsvLine(headers, line);

                // Perform POST request and validate response
                Response response = performPostRequest(dataMap);

                // Validate response based on status code
                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
            fail("Test failed due to IOException: " + e.getMessage());
        }
    }

    private Map<String, String> processCsvLine(String[] headers, String line) {
        Map<String, String> dataMap = new HashMap<>();
        String[] data = line.split(",");
        
        for (int i = 0; i < headers.length; i++) {
            dataMap.put(headers[i], data[i]);
        }
        return dataMap;
    }

    private Response performPostRequest(Map<String, String> dataMap) {
        return given()
                .queryParams(dataMap)
                .contentType(ContentType.JSON)
                .body(createRequestBody(dataMap))
                .when()
                .post("/deposit")
                .then()
                .extract().response();
    }

    private String createRequestBody(Map<String, String> dataMap) {
        return "{\n" +
                "  \"customerId\": \"" + dataMap.get("customerId") + "\",\n" +
                "  \"sourceAccountId\": \"" + dataMap.get("sourceAccountId") + "\",\n" +
                "  \"amount\": \"" + dataMap.get("amount") + "\",\n" +
                "  \"currency\": \"" + dataMap.get("currency") + "\",\n" +
                "  \"image\": \"" + dataMap.get("image") + "\n" +
                "}";
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();

        switch (statusCode) {
            case 200:
                validateSuccessResponse(response);
                break;
            case 400:
                validateErrorResponse(response);
                break;
            case 401:
                validateErrorResponse(response);
                break;
            case 404:
                validateNotFoundResponse(response);
                break;
            case 422:
                validateUnprocessableEntityResponse(response);
                break;
            default:
                fail("Unhandled status code: " + statusCode);
        }
    }

    private void validateSuccessResponse(Response response) {
        assertNotNull(response.jsonPath().getString("success.message"));
        assertThat(response.jsonPath().getString("success.message"), instanceOf(String.class));
        System.out.println("Description: Deposit success");
    }

    private void validateErrorResponse(Response response) {
        assertNotNull(response.jsonPath().getString("error"));
        assertThat(response.jsonPath().getString("error.message"), instanceOf(String.class));
        System.out.println("Description: " + response.jsonPath().getString("error.message"));
    }

    private void validateNotFoundResponse(Response response) {
        validateErrorResponse(response);
    }
  
    private void validateUnprocessableEntityResponse(Response response) {
        validateErrorResponse(response);
    }
}

