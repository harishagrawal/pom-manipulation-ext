// Test generated by RoostGPT for test restA-turbo-assistant-kore using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /deposit_post for http method type POST in rest-assured framework

// RoostTestHash=70db6d5eac

package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class DepositPostTest {

    private static final String BASE_URL = System.getenv("BASE_URL");
    private static final String CSV_FILE_PATH = "src/test/java/org/commonjava/maven/ext/RoostTest/deposit_post.csv";
    private static final String KORE_USER_ID = "999999";
    private static final String BOT_ID = "123456";

    @BeforeClass
    public static void setup() {
        RestAssured.baseURI = BASE_URL;
    }

    @Test
    public void depositPostTest() {
        try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                Map<String, String> map = createDataMap(headers, data);

                Response response = performPostDeposit(map);

                switch (response.statusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 401:
                        validateErrorResponse(response, "Authorisation failed.");
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    default:
                        fail("Unexpected status code received: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            fail("Failed to read CSV file: " + e.getMessage());
        }
    }

    private Map<String, String> createDataMap(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        // Override koreUserId and botId with priority values
        map.put("koreUserId", KORE_USER_ID);
        map.put("botId", BOT_ID);
        return map;
    }

    private Response performPostDeposit(Map<String, String> data) {
        return given()
                .pathParam("koreUserId", data.get("koreUserId"))
                .pathParam("botId", data.get("botId"))
                .pathParam("accountId", data.get("accountId"))
                .header("Authorization", data.get("Authorization"))
                .contentType("application/json")
                .body(data)
                .when()
                .post("/deposit")
                .then()
                .extract().response();
    }

    private void validateSuccessResponse(Response response) {
        assertThat("Deposit should be successful", response.statusCode(), equalTo(200));
        // Additional success response validations can be added here
    }

    private void validateErrorResponse(Response response, String errorMessage) {
        assertThat("Error message should be present", response.jsonPath().get("err.message"), notNullValue());
        assertThat("Error message should be correct", response.jsonPath().get("err.message"), containsString(errorMessage));
    }

    private void validateNotFoundResponse(Response response) {
        assertThat("Not Found message should be present", response.jsonPath().get("err.message"), notNullValue());
        assertThat("Not Found message should be a string", response.jsonPath().get("err.message"), instanceOf(String.class));
        // Additional 404 response validations can be added here
    }

    private void fail(String message) {
        throw new AssertionError(message);
    }
}
