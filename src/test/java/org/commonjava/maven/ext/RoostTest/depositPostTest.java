// Test generated by RoostGPT for test restA-azure-kore using AI Type Azure Open AI and AI Model roostgpt-4-32k

// Test generated for /deposit_post for http method type POST in rest-assured framework

// RoostTestHash=70db6d5eac

package org.commonjava.maven.ext.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.instanceOf;
import static org.junit.Assert.assertEquals;

public class depositPostTest {

    private void validateErrorResponse(Response response) {
        String errorMsg = response.jsonPath().getString("err.message");
        assertEquals("Expected error message", errorMsg);
    }

    private void validateNotFoundResponse(Response response) {
        String errorMsg = response.jsonPath().getString("err.message");
        assertEquals("Expected not found message", errorMsg);
    }

    private void validateUnprocessableEntityResponse(Response response) {
        String errorMsg = response.jsonPath().getString("err.message");
        assertEquals("Expected validation error message", errorMsg);
    }

    @Test
    public void deposit_post_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/commonjava/maven/ext/RoostTest/deposit_post.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> depositProperties = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    depositProperties.put(headers[i], data[i]);
                }

                String depositPayload = String.format("{\n"+
                        "\"customerId\": \"%s\",\n" +
                        "\"sourceAccountId\": \"%s\",\n" +
                        "\"amount\": \"%s\",\n" +
                        "\"currency\": \"%s\",\n" +
                        "\"image\": \"%s\"\n" +
                        "}",
                        depositProperties.get("customerId"),
                        depositProperties.get("sourceAccountId"),
                        depositProperties.get("amount"),
                        depositProperties.get("currency"),
                        depositProperties.get("image")
                );

                Response response = given()
                        .header("Authorization", depositProperties.get("Authorization"))
                        .pathParams(depositProperties)
                        .contentType(ContentType.JSON)
                        .body(depositPayload)
                        .post("/deposit")
                        .then().extract().response();

                switch (response.getStatusCode()) {
                    case 200:
                        System.out.println("Description: Deposit success");
                        break;
                    case 401:
                        System.out.println("Description: Error: Authorization failed.");
                        validateErrorResponse(response);
                        break;
                    case 404:
                        System.out.println("Description: Error: Not Found");
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        System.out.println("Description: Error: Unprocessable Entity");
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        System.out.println("Unexpected response code: " + response.getStatusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
