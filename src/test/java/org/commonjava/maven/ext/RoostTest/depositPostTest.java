// Test generated by RoostGPT for test restA-azure-kore using AI Type Azure Open AI and AI Model roostgpt-4-32k

// Test generated for /deposit_post for http method type POST in rest-assured framework

// RoostTestHash=70db6d5eac

package org.commonjava.maven.ext.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;

public class DepositPostTest {

    @Test
    public void testDepositPost() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/commonjava/maven/ext/RoostTest/deposit_post.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                Map<String, String> inputData = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    inputData.put(headers[i], data[i]);
                }

                String body = String.format("{\n" + "  \"customerId\": \"%s\",\n"+"  \"sourceAccountId\": \"%s\",\n" +
                        "  \"amount\": \"%s\",\n" + "  \"currency\": \"%s\",\n" + "  \"image\": \"%s\",\n"+"}", inputData.get("customerId"),
                        inputData.get("sourceAccountId"), inputData.get("amount"),inputData.get("currency"),inputData.get("image"));

                Response response = createRequest(inputData, body);

                assertThat(response.getStatusCode(), anyOf(equalTo(200),equalTo(401),equalTo(404)));
                if (response.getStatusCode() == 200) {
                    System.out.println("Deposit Success");
                } else {
                    assertErrorResponse(response);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Response createRequest(Map<String, String> inputData, String body) {
        return given().pathParams(inputData)
                .contentType(ContentType.JSON)
                .body(body)
                .when()
                .post("/deposit")
                .then()
                .extract()
                .response();
    }

    private void assertErrorResponse(Response response) {
        assertThat(response.path("err"), is(notNullValue()));
        assertThat(response.path("err.message"), is(instanceOf(String.class)));

        if (response.getStatusCode() == 401) {
            System.out.println("Authorisation Failed");
        }

        if (response.getStatusCode() == 404) {
            System.out.println("Not Found Error");
        }
    }
}
