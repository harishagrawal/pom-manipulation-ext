# Test generated by RoostGPT for test bankAssist-api using AI Type Open AI and AI Model gpt-4-1106-preview

// RoostTestHash=207beafabe

package org.commonjava.maven.ext.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;

public class GetTransactionsPostTest {
  
    @Test  
    public void GetTransactions_post_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/commonjava/maven/ext/RoostTest/GetTransactions_post.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
  
                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  
                
  
                Response response = given()
				.pathParam("koreUserId", map.get("koreUserId"))
				.pathParam("botId", map.get("botId"))
				.pathParam("accountId", map.get("accountId"))
				.pathParam("Authorization", map.get("Authorization"))
				.pathParam("X-Auth-token", map.get("X-Auth-token"))
				.pathParam("X-CORRELATION-ID", map.get("X-CORRELATION-ID"))
				.contentType(ContentType.JSON)
				.body("{\n"+
					"  \"customerId\": \"" + map.get("customerId") + "\",\n" +
					"  \"accountNumber\": \"" + map.get("accountNumber") + "\",\n" +
					"  \"numOfTransactions\": \"" + map.get("numOfTransactions") + "\",\n" +
					"  \"status\": \"" + map.get("status") + "\",\n" +
					"  \"startDate\": \"" + map.get("startDate") + "\",\n" +
					"  \"endDate\": \"" + map.get("endDate") + "\",\n" +
					"  \"sort\": \"" + map.get("sort") + "\",\n" +
					"  \"transactionAmount\": \"" + map.get("transactionAmount") + "\",\n" +
					"  \"category\": \"" + map.get("category") + "\",\n" +
					"  \"debitOrCredit\": \"" + map.get("debitOrCredit") + "\n" +
 				"}")
                .when()
                .post("/GetTransactions")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 200) {
}
  
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }
}
