// Test generated by RoostGPT for test bankAssist-api using AI Type Open AI and AI Model gpt-4-1106-preview

// RoostTestHash=b9ae237532

package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class AddRecurringTransfersPostTest {

    @Before
    public void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void AddRecurringTransfers_post_Test() {
        // Read CSV file
        String csvFilePath = "src/test/java/org/commonjava/maven/ext/RoostTest/AddRecurringTransfers_post.csv";
        try (BufferedReader reader = new BufferedReader(new FileReader(csvFilePath, StandardCharsets.UTF_8))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                Map<String, String> dataMap = createDataMap(headers, data);

                String requestBody = createRequestBody(dataMap);
                Response response = sendPostRequest(dataMap, requestBody);

                switch (response.statusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response, "Bad Request");
                        break;
                    case 401:
                        validateErrorResponse(response, "Unauthorized");
                        break;
                    case 404:
                        validateErrorResponse(response, "Not Found");
                        break;
                    case 422:
                        validateErrorResponse(response, "Unprocessable Entity");
                        break;
                    default:
                        fail("Unexpected status code received: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            fail("Failed reading CSV file.");
        }
    }

    private Map<String, String> createDataMap(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private String createRequestBody(Map<String, String> dataMap) {
        return "{\n" +
                "  \"customerId\": \"" + dataMap.get("customerId") + "\",\n" +
                "  \"amount\": \"" + dataMap.get("amount") + "\",\n" +
                "  \"sourceAccountId\": \"" + dataMap.get("sourceAccountId") + "\",\n" +
                "  \"targetAccountId\": \"" + dataMap.get("targetAccountId") + "\",\n" +
                "  \"currency\": \"" + dataMap.get("currency") + "\",\n" +
                "  \"status\": \"" + dataMap.get("status") + "\",\n" +
                "  \"scheduledDate\": \"" + dataMap.get("scheduledDate") + "\",\n" +
                "  \"recurringOptions\": \"" + dataMap.get("recurringOptions") + "\"\n" +
                "}";
    }

    private Response sendPostRequest(Map<String, String> dataMap, String requestBody) {
        return given()
                .pathParam("koreUserId", dataMap.get("koreUserId"))
                .pathParam("botId", dataMap.get("botId"))
                .pathParam("userCode", dataMap.get("userCode"))
                .pathParam("accountId", dataMap.get("accountId"))
                .header("Authorization", dataMap.get("Authorization"))
                .contentType(ContentType.JSON)
                .body(requestBody)
                .when()
                .post("/AddRecurringTransfers")
                .then()
                .extract().response();
    }

    private void validateSuccessResponse(Response response) {
        assertThat(response.jsonPath().getString("description"), equalTo("schedule transfer added successfully"));
    }

    private void validateErrorResponse(Response response, String errorType) {
        assertThat(response.statusCode(), anyOf(equalTo(400), equalTo(401), equalTo(404), equalTo(422)));
        assertThat(response.jsonPath().getString("err.message"), notNullValue());
        assertThat(response.jsonPath().getString("description"), containsString(errorType));
    }

    private void fail(String message) {
        assertThat(message, false);
    }
}

