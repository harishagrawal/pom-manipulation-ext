// Test generated by RoostGPT for test restA-gpt4-kore using AI Type Open AI and AI Model gpt-4

// Test generated for /UpdateCustomerInfo_put for http method type PUT in rest-assured framework

// RoostTestHash=89ddb90785

package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

public class UpdateCustomerInfoPutTest {

    @Test
    public void UpdateCustomerInfo_put_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try {
            // Read CSV file  
            Files.lines(Paths.get("src/test/java/org/commonjava/maven/ext/RoostTest/UpdateCustomerInfo_put.csv")).skip(1)
                .map(line -> line.split(","))
                .map(this::createMapFromCsvRow)
                .forEach(this::executeUpdateCustomerInfoTest);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> createMapFromCsvRow(String[] data) {
        String[] headers = new String[]{"koreUserId", "botId", "accountId", "Authorization", "X-Auth-token", "X-CORRELATION-ID", "customerId", "email", "alternatePhoneNumber", "isAlternateMobileNumber", "phone", "isPrimaryMobileNumber", "location"};

        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private void executeUpdateCustomerInfoTest(Map<String, String> map) {
        Response response = given()
            .pathParams(map)
            .contentType(ContentType.JSON)
            .body(createRequestBody(map))
            .when()
            .put("/UpdateCustomerInfo")
            .then()
            .extract().response();

        validateResponse(response);
    }

    private String createRequestBody(Map<String, String> map) {
        return "{\n" +
            "  \"customerId\": \"" + map.get("customerId") + "\",\n" +
            "  \"email\": \"" + map.get("email") + "\",\n" +
            "  \"alternatePhoneNumber\": \"" + map.get("alternatePhoneNumber") + "\",\n" +
            "  \"isAlternateMobileNumber\": \"" + map.get("isAlternateMobileNumber") + "\",\n" +
            "  \"phone\": \"" + map.get("phone") + "\",\n" +
            "  \"isPrimaryMobileNumber\": \"" + map.get("isPrimaryMobileNumber") + "\",\n" +
            "  \"location\": \"" + map.get("location") + "\"\n" +
            "}";
    }

    private void validateResponse(Response response) {
        switch (response.statusCode()) {
            case 200:
                System.out.println("Description: successful operation");
                break;
            case 401:
                validateErrorResponse(response, "Authorisation failed.");
                break;
            case 404:
                validateNotFoundResponse(response, "Not Found");
                break;
            default:
                System.out.println("Unexpected status code: " + response.statusCode());
        }
    }

    private void validateErrorResponse(Response response, String expectedMessage) {
        System.out.println("Description: Error: " + expectedMessage);
        if (response.jsonPath().get("err") != null) {
            assertThat(response.jsonPath().get("err.message"), equalTo(expectedMessage));
        }
    }

    private void validateNotFoundResponse(Response response, String expectedMessage) {
        System.out.println("Description: Error: " + expectedMessage);
        if (response.jsonPath().get("err") != null) {
            assertThat(response.jsonPath().get("err.message"), equalTo(expectedMessage));
        }
    }
}
