// Test generated by RoostGPT for test restA-gpt4-kore using AI Type Open AI and AI Model gpt-4

// Test generated for /GetScheduleTransfers_post for http method type POST in rest-assured framework

// RoostTestHash=7b4d2d87f9

package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class GetScheduleTransfersPostTest {

    @Test
    public void GetScheduleTransfers_post_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/commonjava/maven/ext/RoostTest/GetScheduleTransfers_post.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = createMapFromData(headers, data);

                Response response = createResponse(map);

                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> createMapFromData(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private Response createResponse(Map<String, String> map) {
        return given()
                .pathParam("koreUserId", map.get("koreUserId"))
                .pathParam("botId", map.get("botId"))
                .pathParam("userCode", map.get("userCode"))
                .pathParam("accountId", map.get("accountId"))
                .pathParam("Authorization", map.get("Authorization"))
                .contentType(ContentType.JSON)
                .body("{\n" +
                        "  \"customerId\": \"" + map.get("customerId") + "\",\n" +
                        "  \"status\": \"" + map.get("status") + "\"\n" +
                        "}")
                .when()
                .post("/GetScheduleTransfers")
                .then()
                .extract().response();
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        switch (statusCode) {
            case 200:
                System.out.println("Description: schedule transfer list response");
                break;
            case 401:
                validateErrorResponse(response, "Description: Error: Authorisation failed.");
                break;
            case 404:
                validateErrorResponse(response, "Description: Error: Not Found");
                break;
            default:
                System.out.println("Unexpected status code: " + statusCode);
        }
    }

    private void validateErrorResponse(Response response, String message) {
        System.out.println(message);
        if (response.jsonPath().get("err") != null && response.jsonPath().get("err.message") != null) {
            assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));
        }
    }
}
