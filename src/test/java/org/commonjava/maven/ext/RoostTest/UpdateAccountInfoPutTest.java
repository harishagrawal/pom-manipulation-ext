// Test generated by RoostGPT for test api-restassured-azure using AI Type Azure Open AI and AI Model roostgpt-4-32k

// Test generated for /UpdateAccountInfo_put for http method type PUT in rest-assured framework

// RoostTestHash=adb57fbf1b

package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.instanceOf;
import static org.junit.Assert.assertEquals;

public class UpdateAccountInfoPutTest {

    @Test  
    public void UpdateAccountInfo_put_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/commonjava/maven/ext/RoostTest/UpdateAccountInfo_put.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");  

                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);
                }  

                Response response = given()
                    .header("Authorization", map.get("Authorization"))
                    .header("X-Auth-token", map.get("X-Auth-token"))
                    .header("X-CORRELATION-ID", "azure-rest-123")
                    .contentType(ContentType.JSON)
                    .body(createJSONBody(map))
                    .when()
                    .put("/UpdateAccountInfo")  
                    .then()
                    .extract().response();

                switch(response.statusCode()){
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 401:
                        validateErrorResponse(response, "Error: Authorisation failed.");
                        break;
                    case 404:
                        validateNotFoundResponse(response, "Error: Not Found");
                        break;
                    default:
                        System.out.println("Unexpected status code");
                }
            }
        } catch (IOException e) {  
            e.printStackTrace();
        }  
    }

    // Method to create a JSON body
    private String createJSONBody(Map<String, String> map){
        return "{\n"+
            "  \"accountNumber\": \"" + map.get("accountNumber") + "\",\n" +
            "  \"customerId\": \"" + map.get("customerId") + "\",\n" +
            "  \"email\": \"" + map.get("email") + "\",\n" +
            "  \"alternatePhoneNumber\": \"" + map.get("alternatePhoneNumber") + "\",\n" +
            "  \"isAlternateMobileNumber\": \"" + map.get("isAlternateMobileNumber") + "\",\n" +
            "  \"phone\": \"" + map.get("phone") + "\",\n" +
            "  \"isPrimaryMobileNumber\": \"" + map.get("isPrimaryMobileNumber") + "\",\n" +
            "  \"location\": \"" + map.get("location") + "\",\n" +
            "  \"isStatement\": \"" + map.get("isStatement") + "\n" +
        "}";
    }

    // Method to validate 200 Response
    private void validateSuccessResponse(Response response){
        System.out.println("Description: successful operation");
        assertEquals(200, response.statusCode());
    }

    // Method to validate 401 Response
    private void validateErrorResponse(Response response, String errorMsg) {
        System.out.println(errorMsg);
        assertEquals(401, response.statusCode());
        String respError = response.jsonPath().getString("err.message");
        if(respError != null) assertEquals(respError, instanceOf(String.class));
    }

    // Method to validate 404 Response
    private void validateNotFoundResponse(Response response, String errorMsg) {
        System.out.println(errorMsg);
        assertEquals(404, response.statusCode());
        String respError = response.jsonPath().getString("err.message");
        if(respError != null) assertEquals(respError, instanceOf(String.class));
    }
}

