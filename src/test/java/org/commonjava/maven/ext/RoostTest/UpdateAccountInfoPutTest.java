// Test generated by RoostGPT for test restA-azure-kore using AI Type Azure Open AI and AI Model roostgpt-4-32k

// Test generated for /UpdateAccountInfo_put for http method type PUT in rest-assured framework

// RoostTestHash=adb57fbf1b

package org.commonjava.maven.ext.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.assertThat;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.hamcrest.MatcherAssert;

public class UpdateAccountInfoPutTest{
  
    private static final String BASE_URL = System.getenv("BASE_URL");
    private static final String CSV_PATH = "src/test/java/org/commonjava/maven/ext/RoostTest/UpdateAccountInfo_put.csv";

    @Test
    public void updateAccountInfo_Put_Test(){

        String responseMessage = "";

        try (Stream<String> lines = Files.lines(Paths.get(CSV_PATH))) {  
            Map<String, String> csvData = lines
                .skip(1)  
                .map(line -> line.split(","))
                .collect(Collectors.toMap(line -> line[0], line -> line[1]));  

            Response response = given()
                .baseUri(BASE_URL)
                .pathParams(csvData)
                .contentType(ContentType.JSON)
                .body(csvData)
                .when()
                .put("/UpdateAccountInfo")
                .then()
                .extract().response();  

            int statusCode = response.getStatusCode();
            switch (statusCode) {
                case 200:
                    responseMessage = "Successful operation";
                    break;
                case 401:
                    responseMessage = "Authorization failed.";
                    validateErrorResponse(response);
                    break; 
                case 404:
                    responseMessage = "Not Found";
                    validateNotFoundResponse(response);
                    break; 
                default:
                    responseMessage = "Unexpected status code";
            }
        } catch(IOException e){
            e.printStackTrace();
        }
    }

    private void validateErrorResponse(Response response) {
        if(response.jsonPath().get("err.message") == null) {
            return;
        }

        assertThat(response.jsonPath().getString("err.message"),notNullValue());
        assertThat(response.jsonPath().getString("err.message"), instanceOf(String.class));
    }

    private void validateNotFoundResponse(Response response) {
        if(response.jsonPath().get("err.message") == null) {
            return;
        }

        assertThat(response.jsonPath().getString("err.message"),notNullValue());
        assertThat(response.jsonPath().getString("err.message"), instanceOf(String.class));
    }
}
