// Test generated by RoostGPT for test restA-gpt4-kore using AI Type Open AI and AI Model gpt-4

// Test generated for /UpdateAccountInfo_put for http method type PUT in rest-assured framework

// RoostTestHash=adb57fbf1b

package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;

public class UpdateAccountInfoPutTest {

    @Test
    public void updateAccountInfo_put_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/org/commonjava/maven/ext/RoostTest/UpdateAccountInfo_put.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .pathParams(map)
                        .contentType(ContentType.JSON)
                        .body(map)
                        .when()
                        .put("/UpdateAccountInfo")
                        .then()
                        .extract().response();

                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        switch (statusCode) {
            case 200:
                System.out.println("Description: successful operation");
                break;
            case 401:
                System.out.println("Description: Error: Authorisation failed.");
                validateErrorResponse(response);
                break;
            case 404:
                System.out.println("Description: Error: Not Found");
                validateNotFoundResponse(response);
                break;
            default:
                System.out.println("Unexpected status code: " + statusCode);
                break;
        }
    }

    private void validateErrorResponse(Response response) {
        if (response.jsonPath().get("err") != null) {
            if (response.jsonPath().get("err.message") != null) {
                assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));
            }
        }
    }

    private void validateNotFoundResponse(Response response) {
        if (response.jsonPath().get("err") != null) {
            if (response.jsonPath().get("err.message") != null) {
                assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));
            }
        }
    }
}
