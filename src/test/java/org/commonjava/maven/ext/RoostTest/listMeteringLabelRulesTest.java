/*
Test generated by RoostGPT for test metering-integration-rest using AI Type Vertex AI and AI Model code-bison-32k

{
  background: 'Given the API is available',
  rule: null,
  scenario: 'List Metering Label Rules\n' +
    '    When I send a GET request to "/v2.0/metering/metering-label-rules"\n' +
    '    Then the response status code should be 200\n' +
    '    And the response should be in JSON\n' +
    '    And the response should contain the following metering label rules:\n' +
    '      | remote_ip_prefix | direction | metering_label_id                        | id                                   | excluded |\n' +
    '      | 20.0.0.0/24      | ingress   | e131d186-b02d-4c0b-83d5-0c0725c4f812   | 9536641a-7d14-4dc5-afaf-93a973ce0eb8 | false    |\n' +
    '      | 10.0.0.0/24      | ingress   | e131d186-b02d-4c0b-83d5-0c0725c4f812   | ffc6fd15-40de-4e7d-b617-34d3f7a93aec | false    |',
  title: 'List Metering Label Rules'
}

*/
package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasItems;

@DisplayName("List Metering Label Rules Test")
public class listMeteringLabelRulesTest {

    @BeforeAll
    public static void setup() {
        RestAssured.baseURI = System.getenv("{{ROOST_SERVER_URL}}");
    }

    @Test
    @DisplayName("List Metering Label Rules")
    public void listMeteringLabelRules() {

        // GIVEN: The API is available
        // WHEN: I send a GET request to "/v2.0/metering/metering-label-rules"
        Response response = given()
                .when()
                .get("/v2.0/metering/metering-label-rules");

        // THEN: The response status code should be 200
        response.then()
                .statusCode(200);

        // AND: The response should be in JSON
        response.then()
                .contentType("application/json");

        // AND: The response should contain the following metering label rules:
        // | remote_ip_prefix | direction | metering_label_id                        | id                                   | excluded |
        // | 20.0.0.0/24      | ingress   | e131d186-b02d-4c0b-83d5-0c0725c4f812   | 9536641a-7d14-4dc5-afaf-93a973ce0eb8 | false    |
        // | 10.0.0.0/24      | ingress   | e131d186-b02d-4c0b-83d5-0c0725c4f812   | ffc6fd15-40de-4e7d-b617-34d3f7a93aec | false    |
        response.then()
                .body("meteringLabelRules", hasItems(
                        hasItems(
                                equalTo("20.0.0.0/24"),
                                equalTo("ingress"),
                                equalTo("e131d186-b02d-4c0b-83d5-0c0725c4f812"),
                                equalTo("9536641a-7d14-4dc5-afaf-93a973ce0eb8"),
                                equalTo(false)
                        ),
                        hasItems(
                                equalTo("10.0.0.0/24"),
                                equalTo("ingress"),
                                equalTo("e131d186-b02d-4c0b-83d5-0c0725c4f812"),
                                equalTo("ffc6fd15-40de-4e7d-b617-34d3f7a93aec"),
                                equalTo(false)
                        )
                ));
    }
}
