/*
Test generated by RoostGPT for test metering-integration-rest using AI Type Vertex AI and AI Model code-bison-32k

{
  background: null,
  rule: null,
  scenario: 'List Metering Label Rules\n' +
    '    When I send a GET request to "/v2.0/metering/metering-label-rules"\n' +
    '    Then the response status code should be 200\n' +
    '    And the response should be in JSON\n' +
    '    And the response should contain the following metering label rules:\n' +
    '      | remote_ip_prefix | direction | metering_label_id                        | id                                   | excluded |\n' +
    '      | 20.0.0.0/24      | ingress   | e131d186-b02d-4c0b-83d5-0c0725c4f812   | 9536641a-7d14-4dc5-afaf-93a973ce0eb8 | false    |\n' +
    '      | 10.0.0.0/24      | ingress   | e131d186-b02d-4c0b-83d5-0c0725c4f812   | ffc6fd15-40de-4e7d-b617-34d3f7a93aec | false    |',
  title: 'List Metering Label Rules'
}

*/
 package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class ListMeteringLabelRulesTest {

    private static final String ROOST_SERVER_URL = System.getenv("ROOST_SERVER_URL");
    private static RequestSpecification requestSpec;

    @BeforeAll
    public static void setup() {
        requestSpec = new RequestSpecBuilder()
                .setBaseUri(ROOST_SERVER_URL)
                .setContentType(ContentType.JSON)
                .build();
    }

    @Test
    public void listMeteringLabelRules() {
        given()
                .spec(requestSpec)
                .when()
                .get("/v2.0/metering/metering-label-rules")
                .then()
                .assertThat()
                .statusCode(200)
                .contentType(ContentType.JSON)
                .body("remote_ip_prefix[0]", equalTo("20.0.0.0/24"))
                .body("direction[0]", equalTo("ingress"))
                .body("metering_label_id[0]", equalTo("e131d186-b02d-4c0b-83d5-0c0725c4f812"))
                .body("id[0]", equalTo("9536641a-7d14-4dc5-afaf-93a973ce0eb8"))
                .body("excluded[0]", equalTo(false))
                .body("remote_ip_prefix[1]", equalTo("10.0.0.0/24"))
                .body("direction[1]", equalTo("ingress"))
                .body("metering_label_id[1]", equalTo("e131d186-b02d-4c0b-83d5-0c0725c4f812"))
                .body("id[1]", equalTo("ffc6fd15-40de-4e7d-b617-34d3f7a93aec"))
                .body("excluded[1]", equalTo(false));
    }
}