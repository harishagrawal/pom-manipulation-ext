// ********RoostGPT********
/*
Test generated by RoostGPT for test rbi-swagger using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated for /v1/accounts_get for http method type GET in rest-assured framework

RoostTestHash=5144dc9ece


*/

// ********RoostGPT********
package org.commonjava.maven.ext.RoostTest;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;
import org.json.JSONArray;

public class v1AccountsGetTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @Before
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      String[] envVarsList = {""};
      envList = dataloader.load("src/test/java/org/commonjava/maven/ext/RoostTest/v1_accountsGetTest.csv", envVarsList);
    }

  
    @Test  
    public void v1AccountsGet_Test() {
        this.setUp();
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty()) ? testData.get("BASE_URL"): "http://xs2a.rbinternational.com";  
  
                Response responseObj = given()
				.header("Consent-ID", testData.get("Consent-ID") != null ? testData.get("Consent-ID") : "")
				.header("Content-Type", testData.get("Content-Type") != null ? testData.get("Content-Type") : "")
				.header("PSU-ID", testData.get("PSU-ID") != null ? testData.get("PSU-ID") : "")
				.queryParam("withBalance", testData.get("withBalance") != null ? testData.get("withBalance") : "")
                .when()
                .get("/v1/accounts")  
                .then() 
                .extract().response(); 
              JsonPath response;
              String contentType = responseObj.getContentType();
              if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
                String xmlResponse = responseObj.asString();
                JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
                JSONObject jsonData = jsonResponse.getJSONObject("xml");
                String jsonString = jsonData.toString();
                response = new JsonPath(jsonString);
        
              } else {  
                response = responseObj.jsonPath(); 
              }  
         
                if (responseObj.statusCode() == 200) {
					System.out.println("Description: Success");
      
              if (response.get("accounts") != null) {        
                  for (int i = 0; i < response.getList("accounts").size(); i++) {      
              if (response.get("accounts["+ i +"].resourceId") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].resourceId"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].iban") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].iban"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].bic") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].bic"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].pan") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].pan"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].bban") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].bban"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].currency") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].currency"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].accountType") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].accountType"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].cashAccountType") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].cashAccountType"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].name") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].name"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].balances") != null) {        
                  for (int i1 = 0; i1 < response.getList("accounts["+ i +"].balances").size(); i1++) {      
              if (response.get("accounts["+ i +"].balances["+ i1 +"].balanceType") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].balances["+ i1 +"].balanceType"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].balances["+ i1 +"].lastChangeDateTime") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].balances["+ i1 +"].lastChangeDateTime"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].balances["+ i1 +"].referenceDate") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].balances["+ i1 +"].referenceDate"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].balances["+ i1 +"].balanceAmount") != null) {      
              if (response.get("accounts["+ i +"].balances["+ i1 +"].balanceAmount.currency") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].balances["+ i1 +"].balanceAmount.currency"), instanceOf(String.class));  
          }
      
              if (response.get("accounts["+ i +"].balances["+ i1 +"].balanceAmount.amount") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"].balances["+ i1 +"].balanceAmount.amount"), instanceOf(Integer.class));  
          }
  
          }
        
                    }    
                MatcherAssert.assertThat(response.getList("accounts["+ i +"].balances"), instanceOf(List.class));
  
          }
      
              if (response.get("accounts["+ i +"]._links") != null) {      
              if (response.get("accounts["+ i +"]._links.href") != null) {  
                MatcherAssert.assertThat(response.get("accounts["+ i +"]._links.href"), instanceOf(String.class));  
          }
  
          }
        
                    }    
                MatcherAssert.assertThat(response.getList("accounts"), instanceOf(List.class));
  
          }
				}
if (responseObj.statusCode() == 400) {
					System.out.println("Description: Bad Request");
      
              if (response.get("psuMessage") != null) {  
                MatcherAssert.assertThat(response.get("psuMessage"), instanceOf(String.class));  
          }
      
              if (response.get("tppMessages") != null) {        
                  for (int i = 0; i < response.getList("tppMessages").size(); i++) {      
              if (response.get("tppMessages["+ i +"].category") != null) {  
                MatcherAssert.assertThat(response.get("tppMessages["+ i +"].category"), instanceOf(String.class));  
          }
      
              if (response.get("tppMessages["+ i +"].code") != null) {  
                MatcherAssert.assertThat(response.get("tppMessages["+ i +"].code"), instanceOf(String.class));  
          }
      
              if (response.get("tppMessages["+ i +"].path") != null) {  
                MatcherAssert.assertThat(response.get("tppMessages["+ i +"].path"), instanceOf(String.class));  
          }
      
              if (response.get("tppMessages["+ i +"].text") != null) {  
                MatcherAssert.assertThat(response.get("tppMessages["+ i +"].text"), instanceOf(String.class));  
          }
        
                    }    
                MatcherAssert.assertThat(response.getList("tppMessages"), instanceOf(List.class));
  
          }
      
              if (response.get("_links") != null) {      
              if (response.get("_links.href") != null) {  
                MatcherAssert.assertThat(response.get("_links.href"), instanceOf(String.class));  
          }
  
          }
				}
if (responseObj.statusCode() == 401) {
					System.out.println("Description: Unauthorized");
      
              if (response.get("psuMessage") != null) {  
                MatcherAssert.assertThat(response.get("psuMessage"), instanceOf(String.class));  
          }
      
              if (response.get("tppMessages") != null) {        
                  for (int i = 0; i < response.getList("tppMessages").size(); i++) {      
              if (response.get("tppMessages["+ i +"].category") != null) {  
                MatcherAssert.assertThat(response.get("tppMessages["+ i +"].category"), instanceOf(String.class));  
          }
      
              if (response.get("tppMessages["+ i +"].code") != null) {  
                MatcherAssert.assertThat(response.get("tppMessages["+ i +"].code"), instanceOf(String.class));  
          }
      
              if (response.get("tppMessages["+ i +"].path") != null) {  
                MatcherAssert.assertThat(response.get("tppMessages["+ i +"].path"), instanceOf(String.class));  
          }
      
              if (response.get("tppMessages["+ i +"].text") != null) {  
                MatcherAssert.assertThat(response.get("tppMessages["+ i +"].text"), instanceOf(String.class));  
          }
        
                    }    
                MatcherAssert.assertThat(response.getList("tppMessages"), instanceOf(List.class));
  
          }
      
              if (response.get("_links") != null) {      
              if (response.get("_links.href") != null) {  
                MatcherAssert.assertThat(response.get("_links.href"), instanceOf(String.class));  
          }
  
          }
				}
  
            }  
    }
}
