// Test generated by RoostGPT for test bankAssist-api using AI Type Open AI and AI Model gpt-4-1106-preview


// Test generated for /UpdateRecurringTransfers_put for http method type PUT in rest-assured framework

// RoostTestHash=d94103a8c3

package org.commonjava.maven.ext.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class UpdateRecurringTransfersPutTest {
    private static final String BASE_URL = System.getenv("BASE_URL");
    private static final String CSV_PATH = "src/test/java/org/commonjava/maven/ext/RoostTest/UpdateRecurringTransfers_put.csv";
    
    private static final int STATUS_CODE_OK = 200;
    private static final int STATUS_CODE_UNAUTHORIZED = 401;
    private static final int STATUS_CODE_NOT_FOUND = 404;

    @BeforeClass
    public static void setUp() {
        RestAssured.baseURI = BASE_URL;
    }

    @Test
    public void updateRecurringTransfersPutTest() {
        try (BufferedReader reader = new BufferedReader(new FileReader(Paths.get(CSV_PATH).toFile()))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");
            
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                Map<String, String> requestData = mapHeadersToData(headers, data);
                Response response = sendPutRequest(requestData);
                validateResponse(response);
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }
    
    private Map<String, String> mapHeadersToData(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private Response sendPutRequest(Map<String, String> requestData) {
        return given()
                .pathParams(requestData)
                .contentType(ContentType.JSON)
                .body(buildRequestBody(requestData))
                .when()
                .put("/UpdateRecurringTransfers")
                .then()
                .extract().response();
    }

    private void validateResponse(Response response) {
        if (response.statusCode() == STATUS_CODE_OK) {
            System.out.println("Description: Recurring transfer updated successfully");
            // Add success response validation if any
        } else if (response.statusCode() == STATUS_CODE_UNAUTHORIZED || response.statusCode() == STATUS_CODE_NOT_FOUND) {
            validateErrorResponse(response);
        }
        // Implement other status code checks based on the API spec
    }

    private void validateErrorResponse(Response response) {
        int statusCode = response.statusCode();
        switch (statusCode) {
            case STATUS_CODE_UNAUTHORIZED:
                System.out.println("Description: Authorization failed.");
                break;
            case STATUS_CODE_NOT_FOUND:
                System.out.println("Description: Not Found.");
                // Add response validation for 404
                break;
            // Add cases for other error validations based on status codes
        }
        if (response.jsonPath().get("err") != null && response.jsonPath().get("err.message") != null) {
            assertThat(response.jsonPath().get("err.message"), instanceOf(String.class));
        }
    }

    private String buildRequestBody(Map<String, String> requestData) {
        return "{\n" +
                "  \"paymentId\": \"" + requestData.get("paymentId") + "\",\n" +
                "  \"customerId\": \"" + requestData.get("customerId") + "\",\n" +
                "  \"amount\": \"" + requestData.get("amount") + "\",\n" +
                "  \"scheduledDate\": \"" + requestData.get("scheduledDate") + "\",\n" +
                "  \"sourceAccountId\": \"" + requestData.get("sourceAccountId") + "\",\n" +
                "  \"targetAccountId\": \"" + requestData.get("targetAccountId") + "\",\n" +
                "  \"recurringOptions\": \"" + requestData.get("recurringOptions") + "\"\n" +
                "}";
    }
}

